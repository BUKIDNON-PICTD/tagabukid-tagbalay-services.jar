import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;

import tagbalay.facts.*;
import tagbalay.actions.*;

public class TagabukidTagBalayInfoRuleService  {

	@Resource("RuleService")	
	def ruleSvc;

	@ActiveDB("rule")
	def ruleDB;


	@DataContext("tagbalay_variable")
	def hv;

	@Service("DateService")
	def dateSvc;

	@Service("NumberService")
	def numberSvc;

	

	@Env
	def env;

	String RULESET = "tagbalayinfo";

	def comparator = { agg, oldvalue, newvalue ->
		switch(agg) {
			case "COUNT":
				return (oldvalue + 1);

			case "SUM":
				return oldvalue + newvalue;

			case "MIN":
				if( oldvalue <= newvalue  )		
					return oldvalue;
				else
					return newvalue;
			case "MAX":
				if( oldvalue >= newvalue  )		
					return oldvalue;
				else
					return newvalue;
		}
		return 0;
	}

	def buildActions(def request) {
		def actions = new RuleAction();
		actions.addCommand( "ask_tagbalay_info", new AskTagBalayInfo( infotype:'tagbalayinfo', HV:hv, request:request ));
		actions.addCommand( "assert_tagbalay_info", new AssertTagBalayInfo(request:request, HV:hv,  comparator: comparator));
		actions.addCommand( "tagbalay_sysvar", new AddSysVar(request:request, comparator: comparator));
		actions.addCommand( "assert_sysvars", new AssertSysVars(request:request));
		actions.addCommand( "print_test", new PrintTest());
		return actions;
	}

	// @ProxyMethod
	// public def execute(def o) throws Exception {
	// 	def request = [newinfos:[],  vars:[:], entity: o, facts:env.facts ]; 
	// 	request.facts = o.facts;
	// 	request.entity = o.entity;
	// 	request.actions = buildActions( request );
	// 	def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
	// 	int phase = 0;
	// 	for( g in grps ) { 
	// 		request.phasename = g.name;
	// 		request.phase = phase;
	// 		request.vars.clear();
	// 		// request.taxfeefacts.clear();

	// 		ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
	// 		//if first phase and there is entry in newinfos break it.
	// 		if(phase <= 1 && request.newinfos) break;
	// 		phase++;
	// 	}

	// 	return [infos:request.newinfos, phase: phase];
	// }

	@ProxyMethod
	public def execute(def o) throws Exception {

		// println o.infos
		def request = [newinfos:[],  vars:[:], entity: o, facts:env.facts ]; 
		request.actions = buildActions( request );

		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		int phase = 0;
		// def title = "";
		for( g in grps ) {
			// println phase + g.title
			// title = g.title;
			
			request.phasename = g.name;
			request.phase = phase;
			request.vars.clear();

			ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
			//if first phase and there is entry in newinfos break it.
			// println phase + "-" + request.newinfos
		
			if(request.newinfos) break;
			phase++;
		}
		// if(phase == 21) phase = 2;
		return [infos:request.newinfos, phase: phase];
		
	}

	// @ProxyMethod
	// public def execute(def o) throws Exception {
	// 	println o;
	// 	def request = [newinfos:[], hhmMap:[:], vars:[:],requirements:[] ]; 
	// 	request.facts = o.facts;
	// 	request.entity = o.entity;
	// 	request.actions = buildActions( request );
	// 	def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
	// 	int phase = 0;
	// 	def title = "";
	// 	for( g in grps ) { 
	// 		title = g.title;
	// 		request.phasename = g.name;
	// 		request.phase = phase;
	// 		request.vars.clear();
			

	// 		ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
	// 		//if first phase and there is entry in newinfos break it.
	// 		if(phase <= 1 && request.newinfos) break;
	// 		phase++;
	// 	}

	// 	return [infos:request.newinfos, phase: phase];
	// }

// 	@ProxyMethod
// public def execute(def o) throws Exception {
// 		def request = [newinfos:[], hhmMap:[:], vars:[:]]; 
// 		request.facts = o.facts;
// 		request.entity = o.entity;
// 		request.actions = buildActions( request );
// 		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
// 		int phase = 0;
// 		for( g in grps ) { 
// 			request.phasename = g.name;
// 			request.phase = phase;
// 			request.vars.clear();

// 			ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
// 			//if first phase and there is entry in newinfos break it.
// 			if(phase <= 1 && request.newinfos) break;
// 			phase++;
// 		}

// 		return [infos:request.newinfos, phase: phase];
// 	}
	
}

