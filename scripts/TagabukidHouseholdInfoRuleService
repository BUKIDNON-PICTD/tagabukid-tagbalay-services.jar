import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;

import iss.facts.*;
import iss.actions.*;

public class TagabukidHouseholdInfoRuleService  {

	@Resource("RuleService")	
	def ruleSvc;

	@ActiveDB("rule")
	def ruleDB;

	@ActiveDB("lob")
	def lob;

	@DataContext("household_variable")
	def dv;

	@Service("DateService")
	def dateSvc;

	@Service("NumberService")
	def numberSvc;

	

	@Env
	def env;

	String RULESET = "issinfo";

	def comparator = { agg, oldvalue, newvalue ->
		switch(agg) {
			case "COUNT":
				return (oldvalue + 1);

			case "SUM":
				return oldvalue + newvalue;

			case "MIN":
				if( oldvalue <= newvalue  )		
					return oldvalue;
				else
					return newvalue;
			case "MAX":
				if( oldvalue >= newvalue  )		
					return oldvalue;
				else
					return newvalue;
		}
		return 0;
	}

	def buildActions(def request) {
		// def actions = new RuleAction();
		// actions.addCommand( "ask_document_info", new AskDocumentInfo(infotype:'info', DV:dv, request:request ));
		// return actions;
		def actions = new RuleAction();
		actions.addCommand( "ask_business_info", new AskBusinessInfo( infotype:'assessment', BV:bv, request:request ));
		actions.addCommand( "assert_business_info", new AssertBusinessInfo(request:request, BV:bv,  comparator: comparator));
		actions.addCommand( "add_sysvar", new AddSysVar(request:request, comparator: comparator));
		actions.addCommand( "assert_sysvars", new AssertSysVars(request:request));
		actions.addCommand( "print_test", new PrintTest());
		return actions;
	}

	@ProxyMethod
	public def execute(def o) throws Exception {
		def request = [newinfos:[],  vars:[:], entity: o, facts:env.facts ]; 
		request.actions = buildActions( request );
		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );

		int phase = 0;
		for( g in grps ) {
			request.phase = phase;
			request.vars.clear();
			ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
			//if first phase and there is entry in newinfos break it.
			if(phase <= 1 && request.newinfos) break;
			phase++;
		}
		if(phase == 1) phase = 2;
		
		return [infos:request.newinfos, phase: phase];
		
	}
	
}

